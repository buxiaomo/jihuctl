# Avoid running unnecessary services on the Praefect server
gitaly['enable'] = false
postgresql['enable'] = false
redis['enable'] = false
nginx['enable'] = false
puma['enable'] = false
sidekiq['enable'] = false
gitlab_workhorse['enable'] = false
prometheus['enable'] = false
alertmanager['enable'] = false
gitlab_exporter['enable'] = false
gitlab_kas['enable'] = false

# Praefect Configuration
praefect['enable'] = true

# Prevent database migrations from running on upgrade automatically
{% if skipAutoReconfigure.stat.exists %}
praefect['auto_migrate'] = false
{% else %}
praefect['auto_migrate'] = true
{% endif %}
gitlab_rails['auto_migrate'] = false

# Configure the Consul agent
consul['enable'] = true
## Enable service discovery for Prometheus
consul['monitoring_service_discovery'] = true

# START user configuration
# Please set the real values as explained in Required Information section
#

praefect['configuration'] = {
   # ...
   listen_addr: '0.0.0.0:2305',
   auth: {
      # Praefect External Token
      # This is needed by clients outside the cluster (like GitLab Shell) to communicate with the Praefect cluster
      token: '{{ auth.praefect.token }}',
   },
   # Praefect Database Settings
   database: {
      # ...
      host: '{{ groups['ilb'][0] }}',
      port: 5432,
      dbname: 'praefect_production',
      user: 'praefect',
      password: '{{ auth.praefectpg.praefect.md5 }}',
   },
   # Praefect Virtual Storage config
   # Name of storage hash must match storage name in git_data_dirs on GitLab
   # server ('praefect') and in gitaly['configuration'][:storage] on Gitaly nodes ('gitaly-1')
   virtual_storage: [
      {
         name: 'default',
         node: [
{% for host in groups['rails'] %}
            {
               storage: '{{ hostvars[host].ansible_hostname }}',
               address: 'tcp://{{ host }}:8075',
               token: '{{ auth.praefect.token }}'
            },
{% endfor %}
         ],
      },
   ],
   # Set the network address Praefect will listen on for monitoring
   prometheus_listen_addr: '0.0.0.0:9652',
}

# Set the network address the node exporter will listen on for monitoring
node_exporter['listen_address'] = '0.0.0.0:9100'

## The IPs of the Consul server nodes
## You can also use FQDNs and intermix them with IPs
consul['node_name'] = '{{ ansible_hostname }}'
consul['configuration'] = {
   retry_join: %w({{ groups['consul'] | join(' ') }}),
}
#
# END user configuration