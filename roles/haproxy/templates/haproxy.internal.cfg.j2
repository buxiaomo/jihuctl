global
    description Internal Load Balancer
    daemon
    log /dev/log	local0
    log /dev/log	local1 notice
    user haproxy
    group haproxy
    pidfile /var/run/haproxy.pid
    spread-checks 2 # health check inter * (1+-5%)
    max-spread-checks 5s

defaults
    log global
    mode tcp
    default-server inter 2s fall 2 rise 3 maxqueue 20 on-marked-down shutdown-sessions
    balance leastconn
    # HTTP settings
    option tcplog
    option clitcpka # enable the sending of TCP keepalive packets on the client side
    option srvtcpka # enable the sending of TCP keepalive packets on the server side
    option dontlognull # disable logging of null connections
    # TCP settings
    option log-health-checks # log health checks
    option redispatch 2 # redispatch interval 2s
    retries 3
    timeout client 8h
    timeout client-fin 10s
    timeout server 8h
    timeout server-fin 10s
    timeout connect 2s # time to wait for a connection attempt to a server to succeed
    # If no available servers return
    errorfile 400 /etc/haproxy/errors/400.http
    errorfile 403 /etc/haproxy/errors/403.http
    errorfile 408 /etc/haproxy/errors/408.http
    errorfile 500 /etc/haproxy/errors/500.http
    errorfile 502 /etc/haproxy/errors/502.http
    errorfile 503 /etc/haproxy/errors/503.http
    errorfile 504 /etc/haproxy/errors/504.http

frontend internal-pgbouncer-tcp-in
    bind *:6432
    mode tcp
    option tcplog
    default_backend pgbouncer

frontend internal-praefect-tcp-in
    bind *:2305
    mode tcp
    option tcplog
    option clitcpka
    default_backend praefect

frontend internal-praefectpg-tcp-in
    bind *:5432
    default_backend praefectpg

backend praefect
    mode tcp
    option tcp-check
    option srvtcpka
{% for host in groups['praefect'] %}
    server {{ hostvars[host].ansible_hostname }} {{ host }}:2305 check
{% endfor %}

backend praefectpg
    mode tcp
    option tcp-check
    # option httpchk OPTIONS/master
    # http-check expect status 200
{% for host in groups['praefectpg'] %}
    server {{ hostvars[host].ansible_hostname }} {{ host }}:5432 check  # port 8008
{% endfor %}

backend pgbouncer
    mode tcp
    option tcp-check
    # option httpchk OPTIONS/master
    # http-check expect status 200
{% for host in groups['pgbouncer'] %}
    server {{ hostvars[host].ansible_hostname }} {{ host }}:6432 check #  port 8008
{% endfor %}

listen stats
    bind *:1936
    mode http
    stats enable
    stats uri /
    stats refresh 10s
